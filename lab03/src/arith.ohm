Arithmetic {
    // write rules here
    Expr = AddExp

    // ЛЕВОРЕКУРСИВНОЕ ПРАВИЛО для сложения/вычитания
    // AddExp = AddExp ("+" | "-") MulExp  -- binary
    //     | MulExp
    AddExp = MulExp (("+" | "-") MulExp)*

    // ЛЕВОРЕКУРСИВНОЕ ПРАВИЛО для умножения/деления
    // MulExp = MulExp ("*" | "/") PriExp  -- binary
    //     | PriExp
    MulExp = PriExp (("*" | "/") PriExp)*

    PriExp = number                      -- number
        | variable                       -- variable
        | "-" PriExp                   -- unary_minus
        | "(" Expr ")"               -- paren
    
    variable = letter (letter | digit)*

    digit_excluding_zero = "1".."9"
    number = digit_excluding_zero* "." digit+ -- fract
        | digit_excluding_zero digit*      -- whole
        | "0"                              -- zero   
    // _ = (space | "\t" | "\n")*
}